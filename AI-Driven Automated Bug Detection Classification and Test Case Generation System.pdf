{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b4fbdb7a-7aee-4a03-b471-7f107f2838c8",
   "metadata": {},
   "source": [
    "# AI-Driven Automated Bug Detection Classification and Test Case Generation System"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbab971c-92c9-499a-bfaf-00db982cb78b",
   "metadata": {},
   "source": [
    "## Step 1: Generate a Larger Synthetic Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "19b79845-2c7d-4968-b04b-86aab0bdb164",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: faker in c:\\anaconda\\lib\\site-packages (26.0.0)\n",
      "Requirement already satisfied: python-dateutil>=2.4 in c:\\anaconda\\lib\\site-packages (from faker) (2.8.2)\n",
      "Requirement already satisfied: six>=1.5 in c:\\anaconda\\lib\\site-packages (from python-dateutil>=2.4->faker) (1.16.0)\n",
      "Requirement already satisfied: pandas in c:\\anaconda\\lib\\site-packages (2.1.4)\n",
      "Requirement already satisfied: scikit-learn in c:\\anaconda\\lib\\site-packages (1.2.2)\n",
      "Requirement already satisfied: matplotlib in c:\\anaconda\\lib\\site-packages (3.8.0)\n",
      "Requirement already satisfied: seaborn in c:\\anaconda\\lib\\site-packages (0.12.2)\n",
      "Requirement already satisfied: imbalanced-learn in c:\\anaconda\\lib\\site-packages (0.11.0)\n",
      "Requirement already satisfied: xgboost in c:\\anaconda\\lib\\site-packages (2.1.0)\n",
      "Requirement already satisfied: numpy<2,>=1.23.2 in c:\\anaconda\\lib\\site-packages (from pandas) (1.26.4)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\anaconda\\lib\\site-packages (from pandas) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\anaconda\\lib\\site-packages (from pandas) (2023.3.post1)\n",
      "Requirement already satisfied: tzdata>=2022.1 in c:\\anaconda\\lib\\site-packages (from pandas) (2023.3)\n",
      "Requirement already satisfied: scipy>=1.3.2 in c:\\anaconda\\lib\\site-packages (from scikit-learn) (1.11.4)\n",
      "Requirement already satisfied: joblib>=1.1.1 in c:\\anaconda\\lib\\site-packages (from scikit-learn) (1.2.0)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\anaconda\\lib\\site-packages (from scikit-learn) (2.2.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\anaconda\\lib\\site-packages (from matplotlib) (1.2.0)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\anaconda\\lib\\site-packages (from matplotlib) (0.11.0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\anaconda\\lib\\site-packages (from matplotlib) (4.25.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in c:\\anaconda\\lib\\site-packages (from matplotlib) (1.4.4)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\anaconda\\lib\\site-packages (from matplotlib) (23.1)\n",
      "Requirement already satisfied: pillow>=6.2.0 in c:\\anaconda\\lib\\site-packages (from matplotlib) (10.2.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\anaconda\\lib\\site-packages (from matplotlib) (3.0.9)\n",
      "Requirement already satisfied: six>=1.5 in c:\\anaconda\\lib\\site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install faker\n",
    "!pip install pandas scikit-learn matplotlib seaborn imbalanced-learn xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "161a54f1-e83e-40d2-9fe8-0edbb12d4c5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import random\n",
    "from faker import Faker\n",
    "\n",
    "# Initialize Faker\n",
    "fake = Faker()\n",
    "\n",
    "def generate_code_snippet():\n",
    "    functions = [\n",
    "        'def foo():\\n    return 1',\n",
    "        'def bar():\\n    return 2',\n",
    "        'def baz(x):\\n    return x*2',\n",
    "        'def qux():\\n    print(\"Hello World\")\\n    return None',\n",
    "        'def quux(x, y):\\n    return x + y'\n",
    "    ]\n",
    "    return random.choice(functions)\n",
    "\n",
    "def generate_code_comment():\n",
    "    comments = [\n",
    "        '# This function returns 1',\n",
    "        '# This function returns 2',\n",
    "        '# This function multiplies the input by 2',\n",
    "        '# This function prints Hello World',\n",
    "        '# This function returns the sum of two inputs'\n",
    "    ]\n",
    "    return random.choice(comments)\n",
    "\n",
    "def generate_bug_report():\n",
    "    reports = [\n",
    "        'None',\n",
    "        'Potential null reference',\n",
    "        'Print statement error',\n",
    "        'None',\n",
    "        'None'\n",
    "    ]\n",
    "    return random.choice(reports)\n",
    "\n",
    "def generate_severity():\n",
    "    severities = ['Low', 'Medium', 'High']\n",
    "    return random.choices(severities, weights=(50, 30, 20))[0]\n",
    "\n",
    "def generate_user_feedback():\n",
    "    feedbacks = [\n",
    "        'Works as expected',\n",
    "        'Crashes occasionally',\n",
    "        'Works fine',\n",
    "        'Prints an error',\n",
    "        'Works well'\n",
    "    ]\n",
    "    return random.choice(feedbacks)\n",
    "\n",
    "def generate_test_case():\n",
    "    testing_types = ['Feature', 'Integration', 'Performance', 'UAT', 'Regression']\n",
    "    priorities = ['High', 'Medium', 'Low']\n",
    "    statuses = ['Pass', 'Fail', 'In Progress']\n",
    "    tools = ['Selenium', 'JUnit', 'TestNG', 'Cypress', 'Postman']\n",
    "    \n",
    "    version = f\"{random.randint(0, 9)}.{random.randint(0, 9)}.{random.randint(0, 9)}\"\n",
    "    \n",
    "    return {\n",
    "        'Test ID': fake.uuid4(),\n",
    "        'Test Case Name': fake.catch_phrase(),\n",
    "        'Status': random.choice(statuses),\n",
    "        'Testing Tool/Framework': random.choice(tools),\n",
    "        'Version': version,\n",
    "        'Description': fake.text(max_nb_chars=50),\n",
    "        'Precondition': fake.text(max_nb_chars=30),\n",
    "        'Testing priority': random.choice(priorities),\n",
    "        'Testing Type': random.choice(testing_types),\n",
    "        'Expected results': fake.sentence(),\n",
    "        'Actual Result': fake.sentence()\n",
    "    }\n",
    "\n",
    "def generate_defect():\n",
    "    priorities = ['Major', 'Blocker', 'Critical', 'Minor', 'Trivial', 'Medium', 'Low']\n",
    "    severities = ['Sev1', 'Sev2', 'Sev3', 'Sev4']\n",
    "    environments = ['DEV', 'SIT', 'CIT']\n",
    "    statuses = ['Open', 'Closed', 'In Progress', 'Resolved']\n",
    "    story_types = ['Feature', 'Integration', 'Performance', 'UAT', 'Regression']\n",
    "    resolutions = ['Fixed', 'Won\\'t Fix', 'Duplicate', 'Not a Bug', 'Incomplete']\n",
    "    \n",
    "    return {\n",
    "        'Defect summary': fake.sentence(),\n",
    "        'Priority': random.choice(priorities),\n",
    "        'Severity': random.choice(severities),\n",
    "        'Environment/Pipeline': random.choice(environments),\n",
    "        'Story Type': random.choice(story_types),\n",
    "        'Acceptance Criteria': fake.text(max_nb_chars=50),\n",
    "        'Resolution': random.choice(resolutions),\n",
    "        'Status': random.choice(statuses)\n",
    "    }\n",
    "\n",
    "# Generate synthetic data\n",
    "num_samples = 2000  # Increase the number of samples for better training\n",
    "data = {\n",
    "    'code_snippet': [generate_code_snippet() for _ in range(num_samples)],\n",
    "    'code_comment': [generate_code_comment() for _ in range(num_samples)],\n",
    "    'bug_report': [generate_bug_report() for _ in range(num_samples)],\n",
    "    'severity': [generate_severity() for _ in range(num_samples)],\n",
    "    'user_feedback': [generate_user_feedback() for _ in range(num_samples)],\n",
    "    'test_case': [generate_test_case() for _ in range(num_samples)],\n",
    "    'defect': [generate_defect() for _ in range(num_samples)]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3166dbbf-bad0-4874-bde9-7071b3045883",
   "metadata": {},
   "source": [
    "## Step 2: Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "68304fe5-ddff-46a2-ac2d-fbf5495c16cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n",
    "from sklearn.decomposition import TruncatedSVD\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import MinMaxScaler, StandardScaler\n",
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "# Combine code_snippet and code_comment for analysis\n",
    "df['combined_code'] = df['code_snippet'] + ' ' + df['code_comment']\n",
    "\n",
    "# Encode the severity labels\n",
    "label_encoder = LabelEncoder()\n",
    "df['severity_encoded'] = label_encoder.fit_transform(df['severity'])\n",
    "\n",
    "# Feature Extraction with Dimensionality Reduction\n",
    "vectorizer_code = TfidfVectorizer()\n",
    "svd = TruncatedSVD(n_components=20, random_state=42)  # Adjust the number of components\n",
    "pipeline_code = Pipeline([('tfidf', vectorizer_code), ('svd', svd)])\n",
    "X_code = pipeline_code.fit_transform(df['combined_code'])\n",
    "\n",
    "vectorizer_feedback = CountVectorizer()\n",
    "X_feedback = vectorizer_feedback.fit_transform(df['user_feedback'])\n",
    "\n",
    "# Scale the features\n",
    "scaler = MinMaxScaler()\n",
    "X_code = scaler.fit_transform(X_code)\n",
    "X_feedback = scaler.fit_transform(X_feedback.toarray())\n",
    "\n",
    "X = np.hstack((X_code, X_feedback))\n",
    "y = df['severity_encoded']\n",
    "\n",
    "# Apply SMOTE to balance the dataset\n",
    "smote = SMOTE(random_state=42)\n",
    "X_resampled, y_resampled = smote.fit_resample(X, y)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9669ebd-55d1-4b56-b70a-d46cc60585a8",
   "metadata": {},
   "source": [
    "## Step 3: Train-Test Split "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1cd1eb13-47f1-4813-9077-a0660fa40664",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9a38ca5-0a41-4eec-8b45-5a52ee1a18d0",
   "metadata": {},
   "source": [
    "## Step 4: Model Development and Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "252814a9-77cd-4fd8-ba86-b69ed6a18f55",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive Bayes Classifier Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.37      0.39      0.38       201\n",
      "           1       0.34      0.42      0.38       194\n",
      "           2       0.37      0.27      0.31       211\n",
      "\n",
      "    accuracy                           0.36       606\n",
      "   macro avg       0.36      0.36      0.36       606\n",
      "weighted avg       0.36      0.36      0.36       606\n",
      "\n",
      "Accuracy: 0.35973597359735976\n",
      "Random Forest Classifier Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.50      0.51      0.51       201\n",
      "           1       0.37      0.39      0.38       194\n",
      "           2       0.40      0.37      0.38       211\n",
      "\n",
      "    accuracy                           0.42       606\n",
      "   macro avg       0.42      0.42      0.42       606\n",
      "weighted avg       0.42      0.42      0.42       606\n",
      "\n",
      "Accuracy: 0.4240924092409241\n",
      "Gradient Boosting Classifier Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.50      0.49      0.50       201\n",
      "           1       0.37      0.41      0.39       194\n",
      "           2       0.38      0.34      0.35       211\n",
      "\n",
      "    accuracy                           0.41       606\n",
      "   macro avg       0.41      0.41      0.41       606\n",
      "weighted avg       0.41      0.41      0.41       606\n",
      "\n",
      "Accuracy: 0.41254125412541254\n",
      "SVC Classifier Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.44      0.52      0.48       201\n",
      "           1       0.33      0.26      0.29       194\n",
      "           2       0.41      0.42      0.41       211\n",
      "\n",
      "    accuracy                           0.40       606\n",
      "   macro avg       0.39      0.40      0.39       606\n",
      "weighted avg       0.39      0.40      0.39       606\n",
      "\n",
      "Accuracy: 0.400990099009901\n",
      "XGBoost Classifier Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.53      0.55      0.54       201\n",
      "           1       0.36      0.42      0.39       194\n",
      "           2       0.39      0.32      0.35       211\n",
      "\n",
      "    accuracy                           0.43       606\n",
      "   macro avg       0.43      0.43      0.43       606\n",
      "weighted avg       0.43      0.43      0.43       606\n",
      "\n",
      "Accuracy: 0.429042904290429\n",
      "Naive Bayes Classifier Accuracy: 0.35973597359735976\n",
      "Random Forest Classifier Accuracy: 0.4240924092409241\n",
      "Gradient Boosting Classifier Accuracy: 0.41254125412541254\n",
      "SVM Classifier Accuracy: 0.400990099009901\n",
      "XGBoost Classifier Accuracy: 0.429042904290429\n"
     ]
    }
   ],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
    "from sklearn.svm import SVC\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "# Naive Bayes Classifier\n",
    "nb_classifier = MultinomialNB()\n",
    "nb_classifier.fit(X_train, y_train)\n",
    "y_pred_nb = nb_classifier.predict(X_test)\n",
    "print(\"Naive Bayes Classifier Report:\")\n",
    "print(classification_report(y_test, y_pred_nb))\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_nb))\n",
    "\n",
    "# Standard Scaling for other models\n",
    "scaler_standard = StandardScaler()\n",
    "X_train_scaled = scaler_standard.fit_transform(X_train)\n",
    "X_test_scaled = scaler_standard.transform(X_test)\n",
    "\n",
    "# Random Forest Classifier with Hyperparameter Tuning\n",
    "rf_params = {\n",
    "    'n_estimators': [100, 200],\n",
    "    'max_depth': [10, 20],\n",
    "    'min_samples_split': [2, 5],\n",
    "    'min_samples_leaf': [1, 2]\n",
    "}\n",
    "rf_classifier = RandomForestClassifier(random_state=42)\n",
    "rf_grid = GridSearchCV(rf_classifier, rf_params, cv=3, scoring='accuracy')\n",
    "rf_grid.fit(X_train_scaled, y_train)\n",
    "y_pred_rf = rf_grid.predict(X_test_scaled)\n",
    "print(\"Random Forest Classifier Report:\")\n",
    "print(classification_report(y_test, y_pred_rf))\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_rf))\n",
    "\n",
    "# Gradient Boosting Classifier with Hyperparameter Tuning\n",
    "gb_params = {\n",
    "    'n_estimators': [100, 200],\n",
    "    'learning_rate': [0.1, 0.01],\n",
    "    'max_depth': [3, 5],\n",
    "    'min_samples_split': [2, 5],\n",
    "    'min_samples_leaf': [1, 2]\n",
    "}\n",
    "gb_classifier = GradientBoostingClassifier(random_state=42)\n",
    "gb_grid = GridSearchCV(gb_classifier, gb_params, cv=3, scoring='accuracy')\n",
    "gb_grid.fit(X_train_scaled, y_train)\n",
    "y_pred_gb = gb_grid.predict(X_test_scaled)\n",
    "print(\"Gradient Boosting Classifier Report:\")\n",
    "print(classification_report(y_test, y_pred_gb))\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_gb))\n",
    "\n",
    "# Support Vector Machine Classifier with Hyperparameter Tuning\n",
    "svc_params = {\n",
    "    'C': [0.1, 1, 10],\n",
    "    'gamma': [1, 0.1, 0.01],\n",
    "    'kernel': ['rbf', 'linear']\n",
    "}\n",
    "svc_classifier = SVC(random_state=42)\n",
    "svc_grid = GridSearchCV(svc_classifier, svc_params, cv=3, scoring='accuracy')\n",
    "svc_grid.fit(X_train_scaled, y_train)\n",
    "y_pred_svc = svc_grid.predict(X_test_scaled)\n",
    "print(\"SVC Classifier Report:\")\n",
    "print(classification_report(y_test, y_pred_svc))\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_svc))\n",
    "\n",
    "# XGBoost Classifier with Hyperparameter Tuning\n",
    "xgb_params = {\n",
    "    'n_estimators': [100, 200],\n",
    "    'learning_rate': [0.1, 0.01],\n",
    "    'max_depth': [3, 5],\n",
    "    'min_child_weight': [1, 3]\n",
    "}\n",
    "xgb_classifier = XGBClassifier(random_state=42)\n",
    "xgb_grid = GridSearchCV(xgb_classifier, xgb_params, cv=3, scoring='accuracy')\n",
    "xgb_grid.fit(X_train_scaled, y_train)\n",
    "y_pred_xgb = xgb_grid.predict(X_test_scaled)\n",
    "print(\"XGBoost Classifier Report:\")\n",
    "print(classification_report(y_test, y_pred_xgb))\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_xgb))\n",
    "\n",
    "# Print summaries for comparison\n",
    "print(\"Naive Bayes Classifier Accuracy:\", accuracy_score(y_test, y_pred_nb))\n",
    "print(\"Random Forest Classifier Accuracy:\", accuracy_score(y_test, y_pred_rf))\n",
    "print(\"Gradient Boosting Classifier Accuracy:\", accuracy_score(y_test, y_pred_gb))\n",
    "print(\"SVM Classifier Accuracy:\", accuracy_score(y_test, y_pred_svc))\n",
    "print(\"XGBoost Classifier Accuracy:\", accuracy_score(y_test, y_pred_xgb))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "262118e9-4d32-461b-8007-e833eccd164e",
   "metadata": {},
   "source": [
    "## Step 5: Generate Test Cases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "895d212f-0f03-4ae8-bd43-6d87bf4d1f7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generated Test Cases:\n",
      "                                Test ID  \\\n",
      "0  5940f5e4-32b2-40f7-a05a-f8c99b610bc1   \n",
      "1  e0169e1c-8052-4a4c-aeec-87d0d81aa938   \n",
      "2  81a04a38-e317-4320-8a85-6119b5b41cdc   \n",
      "3  f95074ee-97d5-4413-bf16-1d1b9804df99   \n",
      "4  b1c2449d-baa8-4c55-a920-64dd86886bbc   \n",
      "5  cb192318-8b55-46c9-8b72-988a56a486c2   \n",
      "6  0dbc7ebe-f658-40cd-988b-b134c27d2f05   \n",
      "7  52a07869-61b0-4058-a277-0824f52990d6   \n",
      "8  b42d2542-6ba1-4017-ab15-2375388ee18c   \n",
      "9  3d75ea83-b3d2-4bca-b96d-70e6587f5126   \n",
      "\n",
      "                               Test Case Name       Status  \\\n",
      "0  Triple-buffered leadingedge info-mediaries         Pass   \n",
      "1                       Phased mobile adapter         Fail   \n",
      "2          Cross-group bottom-line throughput  In Progress   \n",
      "3            Streamlined homogeneous leverage         Pass   \n",
      "4       Face-to-face upward-trending encoding  In Progress   \n",
      "5      Re-engineered zero-defect productivity  In Progress   \n",
      "6             Compatible background help-desk         Pass   \n",
      "7         Team-oriented homogeneous hierarchy         Fail   \n",
      "8      Pre-emptive upward-trending throughput         Fail   \n",
      "9         Secured zero administration toolset         Fail   \n",
      "\n",
      "  Testing Tool/Framework Version  \\\n",
      "0                  JUnit   2.1.0   \n",
      "1                  JUnit   2.2.5   \n",
      "2                 TestNG   1.3.8   \n",
      "3               Selenium   9.3.3   \n",
      "4                Postman   5.0.1   \n",
      "5                 TestNG   1.4.7   \n",
      "6               Selenium   7.9.4   \n",
      "7               Selenium   3.2.6   \n",
      "8                 TestNG   2.9.6   \n",
      "9                  JUnit   5.6.2   \n",
      "\n",
      "                                         Description  \\\n",
      "0           Well film add character possible camera.   \n",
      "1                     Space traditional where guess.   \n",
      "2                Here such where large myself eight.   \n",
      "3  Despite special we anyone. Politics born me draw.   \n",
      "4                         Successful trade sell off.   \n",
      "5                   Yet specific argue or at center.   \n",
      "6                             Many baby boy respond.   \n",
      "7                        Campaign sometimes various.   \n",
      "8                                 Account wear lead.   \n",
      "9     Feel late student compare law hospital common.   \n",
      "\n",
      "                    Precondition Testing priority Testing Type  \\\n",
      "0    Writer opportunity compare.             High  Performance   \n",
      "1   Practice ask reason prevent.           Medium          UAT   \n",
      "2   Among our keep campaign ago.           Medium   Regression   \n",
      "3  Let college avoid style hear.              Low      Feature   \n",
      "4                  Car stuff Mr.              Low          UAT   \n",
      "5      Ready author they forget.              Low  Integration   \n",
      "6         Four discussion share.             High      Feature   \n",
      "7          Agency plan suddenly.              Low      Feature   \n",
      "8               Keep nor course.             High  Performance   \n",
      "9     Last true second movement.           Medium          UAT   \n",
      "\n",
      "                                    Expected results  \\\n",
      "0   Morning last to teach structure property travel.   \n",
      "1        Teacher million question just general less.   \n",
      "2                        Matter hotel together west.   \n",
      "3                Worker attention majority last sea.   \n",
      "4             Wait tough himself make order account.   \n",
      "5  Simply reveal everyone author close decide ans...   \n",
      "6                                 Least put show if.   \n",
      "7          Way hotel entire deep them than keep leg.   \n",
      "8  Word compare relationship share relationship g...   \n",
      "9                      American second career great.   \n",
      "\n",
      "                                       Actual Result  \n",
      "0         Since talk close moment trial fill reveal.  \n",
      "1                           Court ball talk account.  \n",
      "2                                Network price high.  \n",
      "3            Media will affect feel dog identify as.  \n",
      "4  Blood week treatment particular stuff almost war.  \n",
      "5                             Right plan today face.  \n",
      "6             Executive cut hear adult along others.  \n",
      "7                    Amount computer everyone today.  \n",
      "8          Often resource even coach charge prevent.  \n",
      "9           Quickly cup civil hand now least system.  \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from faker import Faker\n",
    "\n",
    "# Initialize Faker\n",
    "fake = Faker()\n",
    "\n",
    "def generate_test_case():\n",
    "    testing_types = ['Feature', 'Integration', 'Performance', 'UAT', 'Regression']\n",
    "    priorities = ['High', 'Medium', 'Low']\n",
    "    statuses = ['Pass', 'Fail', 'In Progress']\n",
    "    tools = ['Selenium', 'JUnit', 'TestNG', 'Cypress', 'Postman']\n",
    "    \n",
    "    version = f\"{random.randint(0, 9)}.{random.randint(0, 9)}.{random.randint(0, 9)}\"\n",
    "    \n",
    "    return {\n",
    "        'Test ID': fake.uuid4(),\n",
    "        'Test Case Name': fake.catch_phrase(),\n",
    "        'Status': random.choice(statuses),\n",
    "        'Testing Tool/Framework': random.choice(tools),\n",
    "        'Version': version,\n",
    "        'Description': fake.text(max_nb_chars=50),\n",
    "        'Precondition': fake.text(max_nb_chars=30),\n",
    "        'Testing priority': random.choice(priorities),\n",
    "        'Testing Type': random.choice(testing_types),\n",
    "        'Expected results': fake.sentence(),\n",
    "        'Actual Result': fake.sentence()\n",
    "    }\n",
    "\n",
    "# Generate synthetic test cases\n",
    "num_test_cases = 10  # Number of test cases to generate\n",
    "test_cases = [generate_test_case() for _ in range(num_test_cases)]\n",
    "\n",
    "# Create a DataFrame\n",
    "df_test_cases = pd.DataFrame(test_cases)\n",
    "\n",
    "# Display the test cases in a tabular format\n",
    "print(\"Generated Test Cases:\")\n",
    "print(df_test_cases)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7210c0cd-4cdf-479d-add0-9d911b204b5e",
   "metadata": {},
   "source": [
    "## Step 6: Create Defect Summaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c798055d-b526-4930-a38a-d429d5625e9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generated Defect Summaries:\n",
      "                                        Defect summary  Priority Severity  \\\n",
      "0             Up success most each seven ten three as.    Medium     Sev4   \n",
      "1                             Increase bit move no my.    Medium     Sev3   \n",
      "2                               Charge hard establish.   Trivial     Sev2   \n",
      "3           Region loss professor season suffer place.     Major     Sev4   \n",
      "4                    Behavior if dinner world involve.    Medium     Sev4   \n",
      "...                                                ...       ...      ...   \n",
      "1995                   Between turn too them economic.   Trivial     Sev2   \n",
      "1996               However popular spring recent none.       Low     Sev1   \n",
      "1997  Attack air happy maybe range very international.  Critical     Sev3   \n",
      "1998                            Small remember source.   Blocker     Sev1   \n",
      "1999                      Her add international money.   Blocker     Sev2   \n",
      "\n",
      "     Environment/Pipeline   Story Type  \\\n",
      "0                     CIT          UAT   \n",
      "1                     DEV  Integration   \n",
      "2                     CIT   Regression   \n",
      "3                     CIT  Integration   \n",
      "4                     CIT          UAT   \n",
      "...                   ...          ...   \n",
      "1995                  SIT  Integration   \n",
      "1996                  SIT  Performance   \n",
      "1997                  DEV  Integration   \n",
      "1998                  SIT      Feature   \n",
      "1999                  DEV      Feature   \n",
      "\n",
      "                                Acceptance Criteria  Resolution       Status  \n",
      "0            Sister provide approach style special.   Not a Bug       Closed  \n",
      "1     Together there along personal recently never.   Duplicate  In Progress  \n",
      "2           Into might no else four community open.  Incomplete  In Progress  \n",
      "3                 Join stock eye build visit these.   Won't Fix  In Progress  \n",
      "4                            Memory argue box fear.  Incomplete         Open  \n",
      "...                                             ...         ...          ...  \n",
      "1995                Amount major identify beat how.       Fixed       Closed  \n",
      "1996       Toward for lead see instead institution.       Fixed       Closed  \n",
      "1997     Remember morning trade develop way doctor.   Not a Bug     Resolved  \n",
      "1998                         Various or radio deal.  Incomplete     Resolved  \n",
      "1999                  Hope surface force travel do.  Incomplete       Closed  \n",
      "\n",
      "[2000 rows x 8 columns]\n"
     ]
    }
   ],
   "source": [
    "# Expand defect details into separate columns\n",
    "defects = pd.DataFrame(df['defect'].tolist())\n",
    "df = pd.concat([df, defects], axis=1)\n",
    "\n",
    "# Display the defect summaries\n",
    "print(\"Generated Defect Summaries:\")\n",
    "print(df[['Defect summary', 'Priority', 'Severity', 'Environment/Pipeline', 'Story Type', 'Acceptance Criteria', 'Resolution', 'Status']])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35ca58b6-a6ea-431a-a546-09e101382f73",
   "metadata": {},
   "source": [
    "## Step 7: Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "875e461e-fc92-407b-bbbc-354d7e9aef6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Visualize Bug Severity Distribution\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.countplot(data=df, x='severity')\n",
    "plt.title('Bug Severity Distribution')\n",
    "plt.xlabel('Severity')\n",
    "plt.ylabel('Count')\n",
    "plt.show()\n",
    "\n",
    "# Confusion Matrix for the Best Model (XGBoost Classifier)\n",
    "conf_matrix = confusion_matrix(y_test, y_pred_xgb)\n",
    "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\n",
    "plt.title('Confusion Matrix - XGBoost Classifier')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
